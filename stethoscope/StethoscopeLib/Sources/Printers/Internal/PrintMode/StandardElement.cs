using Stethoscope.Common;

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Stethoscope.Printers.Internal.PrintMode
{
    /// <summary>
    /// A normal print mode element.
    /// </summary>
    public class StandardElement : IElement
    {
        /// <summary>
        /// Default format for printing attributes, which only prints the attribute value itself.
        /// </summary>
        public const string DefaultAttributeFormat = "{0}";

        private readonly LogAttribute attribute;

        private bool initialized = false;
        private string format;

        /// <summary>
        /// Create a new StandardElement.
        /// </summary>
        /// <param name="attribute">The attribute the element will print.</param>
        public StandardElement(LogAttribute attribute)
        {
            this.attribute = attribute;
            this.format = DefaultAttributeFormat;
        }

        /// <summary>
        /// Initialize the element if there's more values required for it's print. Can only be done once, and must be done before <see cref="Process(TextWriter, ILogEntry, object)"/> has been invoked.
        /// </summary>
        /// <param name="attributeFormat">The <see cref="string.Format(string, object)"/> style print to print the attribute out with. Default value only prints the attribute.</param>
        /// <param name="conditionals">All conditions used to determine if the element should be printed.</param>
        /// <param name="modifiers">All modifiers to apply to the printed element.</param>
        public void OptionalInitialize(string attributeFormat = DefaultAttributeFormat, IConditional[] conditionals = null, IModifier[] modifiers = null)
        {
            if (initialized)
            {
                throw new InvalidOperationException("element has already been initialized");
            }
            initialized = true;
            this.format = attributeFormat;
            //TODO
        }

        /// <summary>
        /// Get the error handler that exists for this element, if one exists
        /// </summary>
        public IExceptionHandler ExceptionHandler => throw new NotImplementedException();

        /// <summary>
        /// Generate the state values necessary for <see cref="Process(TextWriter, ILogEntry, object)"/> to run.
        /// </summary>
        /// <returns>Generated state object.</returns>
        public object GenerateStateObject()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Process an individual log with the stored print mode values.
        /// </summary>
        /// <param name="writer">The writer to write to.</param>
        /// <param name="log">The log to process.</param>
        /// <param name="state">The state generated by <see cref="GenerateStateObject"/></param>
        public void Process(TextWriter writer, ILogEntry log, object state)
        {
            if (!initialized)
            {
                initialized = true;
            }

            //XXX
            if (log.HasAttribute(attribute))
            {
                writer.Write(format, log.GetAttribute<object>(attribute));
            }
            else
            {
                //XXX
                throw new InvalidOperationException(string.Format("Missing Value for \"{0}\"", attribute)); //XXX should be a custom exception type
            }
        }
    }
}
