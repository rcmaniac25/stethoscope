using Stethoscope.Common;

using System;
using System.IO;

namespace Stethoscope.Printers.Internal.PrintMode
{
    /// <summary>
    /// Ordered list of processaable print mode values.
    /// </summary>
    public class PrintModeFormat
    {
        //TODO

        /// <summary>
        /// When processing a log, write directly to the specified writer.
        /// If enabled, it may result in some logs being partially written out, depending on modifiers.
        /// </summary>
        public bool DirectWrite { get; set; }

        /// <summary>
        /// Set the print mode value to use. This will reset any existing print mode values.
        /// </summary>
        /// <param name="mode">The print mode to use.</param>
        /// <param name="printer">The printer that will be using the print mode.</param>
        public void SetMode(string mode, IPrinter printer)
        {
            var factory = printer.ElementFactory ?? new ElementFactor();
            //TODO
        }

        /// <summary>
        /// Evaluate the the format that has been set to determine if <see cref="DirectWrite"/> can be used.
        /// </summary>
        public void UpdateDirectWrite()
        {
            //TODO
        }

        /// <summary>
        /// Process an individual log with the stored print mode values.
        /// </summary>
        /// <param name="writer">The writer to write to.</param>
        /// <param name="log">The log to process.</param>
        /// <param name="state">The state generated by <see cref="GenerateStateObject"/></param>
        public void ProcessLog(TextWriter writer, ILogEntry log, object state)
        {
            if (writer == null)
            {
                throw new ArgumentNullException(nameof(writer));
            }
            if (log == null)
            {
                throw new ArgumentNullException(nameof(log));
            }

            var directWrite = DirectWrite; // Precaution if value is changed mid-write. Weird, but is plausible and cheap to handle
            var logWriter = directWrite ? writer : new StringWriter() { NewLine = writer.NewLine };

            //TODO
            /*
             * 1. evaluate log-level conditional
             * 2. Iterate over all format parts
             * 3. Execute part (writing occurs to a buffer)
             *     a. If raw, print. If not raw, evaluate conditional
             *     b. if conditional passes, print value (using modifiers if need-be) and notify conditional
             *     c. FUTURE-TODO: if conditional fails, and a failed conditional modifier exists, invoke it
             *     d. if exception occurs, invoke failure handler modifier if it exists
             *  4. Flush buffer to actual text writer
             */

            if (!directWrite)
            {
                writer.Write(((StringWriter)logWriter).ToString());
                writer.Flush();
            }
        }

        /// <summary>
        /// Generate the state values necessary for <see cref="ProcessLog(TextWriter, ILogEntry, object)"/> to run.
        /// </summary>
        /// <returns>Generated state object.</returns>
        public object GenerateStateObject()
        {
            //TODO
            return null;
        }
    }
}
